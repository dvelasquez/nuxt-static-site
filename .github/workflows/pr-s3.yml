name: Deploy Pull Request to S3

on:
  pull_request:
    branches:
      - main
jobs:
  install_dependencies:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup node env üèó
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14

      - name: Get yarn cache directory path üõ†
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache üì¶
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v4-

      - name: Cache node_modules üì¶
        uses: actions/cache@v2.1.4
        id: node_modules-cache
        with:
          path: |
            **/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-v4-

      - name: Install dependencies üë®üèª‚Äçüíª
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

  analyse_locally:
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules üì¶
        uses: actions/cache@v2.1.4
        id: node_modules-cache-analysis
        with:
          path: |
            **/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-analysis-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-analysis-v4-
            ${{ runner.os }}-node_modules-v4-

      - name: Install dependencies üë®üèª‚Äçüíª
        if: steps.node_modules-cache-analysis.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Build Application for Analysis üõ†
        run: yarn generate

      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@7.0.0
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          GITHUB_PR_NUMBER: ${{github.event.number}}
        with:
          configPath: './lighthouserc.pr.js'
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        if: always()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const results = ${{ steps.lighthouse_audit.outputs.manifest }}
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const assertionResults = ${{ steps.lighthouse_audit.outputs.assertionResults }}
            const fls = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/scripts/format-lighthouse-score.js`)
            const comment = fls({ results, links, assertionResults })
            core.setOutput("comment", comment);

      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse-local
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}

  deploy_pr_s3:
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules üì¶
        uses: actions/cache@v2.1.4
        id: node_modules-cache-s3
        with:
          path: |
            **/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-s3-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-s3-v4-
            ${{ runner.os }}-node_modules-v4-

      - name: Install dependencies üë®üèª‚Äçüíª
        run: yarn --frozen-lockfile

      - name: Build Application for PR üõ†
        run: BASE_URL=/pr/${{github.event.number}}/ yarn generate

      - name: Deploying application to Amazon S3
        uses: dvelasquez/deploy-s3-action@main
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-1
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET }}
          BUCKET_PATH: "/pr/${{github.event.number}}"
          DIST_LOCATION_CODE: ./dist

      - name: Purge cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          # Zone is required by both authentication methods
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Update pull-request body
        uses: claudiamatosa/github-action-replace-pr-body@master
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

  lint_and_test:
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules üì¶
        uses: actions/cache@v2.1.4
        id: node_modules-cache
        with:
          path: |
            **/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-node_modules-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-v4-

      - name: Install dependencies üë®üèª‚Äçüíª
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Run linter üëÄ
        run: yarn lint

      - name: Run tests üß™
        run: yarn test

  analyse_deploy:
    runs-on: ubuntu-latest
    needs: deploy_pr_s3

    steps:
      - uses: actions/checkout@v2

      - name: Warm cache using Lighthouse
        id: lighthouse_warm_cache
        uses: treosh/lighthouse-ci-action@7.0.0
        env:
          GITHUB_PR_NUMBER: ${{github.event.number}}
        with:
          urls: |
            https://panor.am/pr/${{github.event.number}}/
            https://panor.am/pr/${{github.event.number}}/places/
          uploadArtifacts: false # save results as an action artifacts
          runs: 1

      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@7.0.0
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          GITHUB_PR_NUMBER: ${{github.event.number}}
        with:
          urls: |
            https://panor.am/pr/${{github.event.number}}/
            https://panor.am/pr/${{github.event.number}}/places/
            https://panor.am/pr/${{github.event.number}}/places/don-peyo
          budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true
          runs: 1

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        if: always()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const results = ${{ steps.lighthouse_audit.outputs.manifest }}
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const assertionResults = ${{ steps.lighthouse_audit.outputs.assertionResults }}
            const fls = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/scripts/format-lighthouse-score.js`)
            const comment = fls({ results, links, assertionResults })
            core.setOutput("comment", comment);

      - name: Add comment to PR
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}
